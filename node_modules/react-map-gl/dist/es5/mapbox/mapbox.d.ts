import type { Transform, ViewState, ViewStateChangeEvent, PointLike, PaddingOptions, Light, Fog, Terrain, MapboxStyle, ImmutableLike, LngLatBoundsLike, MapMouseEvent, MapLayerMouseEvent, MapLayerTouchEvent, MapWheelEvent, MapBoxZoomEvent, MapStyleDataEvent, MapSourceDataEvent, MapEvent, ErrorEvent, MapInstance, MapInstanceInternal } from '../types';
export declare type MapboxProps<MapT extends MapInstance = MapInstance> = Partial<ViewState> & {
    mapboxAccessToken?: string;
    /** Camera options used when constructing the Map instance */
    initialViewState?: Partial<ViewState> & {
        /** The initial bounds of the map. If bounds is specified, it overrides longitude, latitude and zoom options. */
        bounds?: LngLatBoundsLike;
        /** A fitBounds options object to use only when setting the bounds option. */
        fitBoundsOptions?: {
            offset?: PointLike;
            minZoom?: number;
            maxZoom?: number;
            padding?: number | PaddingOptions;
        };
    };
    /** If provided, render into an external WebGL context */
    gl?: WebGLRenderingContext;
    /** For external controller to override the camera state */
    viewState?: ViewState & {
        width: number;
        height: number;
    };
    /** Mapbox style */
    mapStyle?: string | MapboxStyle | ImmutableLike<MapboxStyle>;
    /** Enable diffing when the map style changes
     * @default true
     */
    styleDiffing?: boolean;
    /** The fog property of the style. Must conform to the Fog Style Specification .
     * If `undefined` is provided, removes the fog from the map. */
    fog?: Fog;
    /** Light properties of the map. */
    light?: Light;
    /** Terrain property of the style. Must conform to the Terrain Style Specification .
     * If `undefined` is provided, removes terrain from the map. */
    terrain?: Terrain;
    /** Default layers to query on pointer events */
    interactiveLayerIds?: string[];
    /** CSS cursor */
    cursor?: string;
    onMouseDown?: (e: MapLayerMouseEvent<MapT>) => void;
    onMouseUp?: (e: MapLayerMouseEvent<MapT>) => void;
    onMouseOver?: (e: MapLayerMouseEvent<MapT>) => void;
    onMouseMove?: (e: MapLayerMouseEvent<MapT>) => void;
    onClick?: (e: MapLayerMouseEvent<MapT>) => void;
    onDblClick?: (e: MapLayerMouseEvent<MapT>) => void;
    onMouseEnter?: (e: MapLayerMouseEvent<MapT>) => void;
    onMouseLeave?: (e: MapLayerMouseEvent<MapT>) => void;
    onMouseOut?: (e: MapLayerMouseEvent<MapT>) => void;
    onContextMenu?: (e: MapLayerMouseEvent<MapT>) => void;
    onTouchStart?: (e: MapLayerTouchEvent<MapT>) => void;
    onTouchEnd?: (e: MapLayerTouchEvent<MapT>) => void;
    onTouchMove?: (e: MapLayerTouchEvent<MapT>) => void;
    onTouchCancel?: (e: MapLayerTouchEvent<MapT>) => void;
    onMoveStart?: (e: ViewStateChangeEvent<MapT>) => void;
    onMove?: (e: ViewStateChangeEvent<MapT>) => void;
    onMoveEnd?: (e: ViewStateChangeEvent<MapT>) => void;
    onDragStart?: (e: ViewStateChangeEvent<MapT>) => void;
    onDrag?: (e: ViewStateChangeEvent<MapT>) => void;
    onDragEnd?: (e: ViewStateChangeEvent<MapT>) => void;
    onZoomStart?: (e: ViewStateChangeEvent<MapT>) => void;
    onZoom?: (e: ViewStateChangeEvent<MapT>) => void;
    onZoomEnd?: (e: ViewStateChangeEvent<MapT>) => void;
    onRotateStart?: (e: ViewStateChangeEvent<MapT>) => void;
    onRotate?: (e: ViewStateChangeEvent<MapT>) => void;
    onRotateEnd?: (e: ViewStateChangeEvent<MapT>) => void;
    onPitchStart?: (e: ViewStateChangeEvent<MapT>) => void;
    onPitch?: (e: ViewStateChangeEvent<MapT>) => void;
    onPitchEnd?: (e: ViewStateChangeEvent<MapT>) => void;
    onWheel?: (e: MapWheelEvent<MapT>) => void;
    onBoxZoomStart?: (e: MapBoxZoomEvent<MapT>) => void;
    onBoxZoomEnd?: (e: MapBoxZoomEvent<MapT>) => void;
    onBoxZoomCancel?: (e: MapBoxZoomEvent<MapT>) => void;
    onResize?: (e: MapEvent<MapT>) => void;
    onLoad?: (e: MapEvent<MapT>) => void;
    onRender?: (e: MapEvent<MapT>) => void;
    onIdle?: (e: MapEvent<MapT>) => void;
    onError?: (e: ErrorEvent<MapT>) => void;
    onRemove?: (e: MapEvent<MapT>) => void;
    onData?: (e: MapStyleDataEvent<MapT> | MapSourceDataEvent<MapT>) => void;
    onStyleData?: (e: MapStyleDataEvent<MapT>) => void;
    onSourceData?: (e: MapSourceDataEvent<MapT>) => void;
};
/**
 * A wrapper for mapbox-gl's Map class
 */
export default class Mapbox<MapT extends MapInstance = MapInstance> {
    private _MapClass;
    private _map;
    props: MapboxProps<MapT>;
    private _renderTransform;
    private _internalUpdate;
    private _inRender;
    private _hoveredFeatures;
    private _deferredEvents;
    static savedMaps: Mapbox[];
    constructor(MapClass: {
        new (options: any): MapInstance;
    }, props: MapboxProps<MapT>, container: HTMLDivElement);
    get map(): MapT;
    get transform(): Transform;
    setProps(props: MapboxProps<MapT>): void;
    static reuse<MapT extends MapInstance>(props: MapboxProps<MapT>, container: HTMLDivElement): Mapbox<MapT>;
    _initialize(container: HTMLDivElement): void;
    recycle(): void;
    destroy(): void;
    redraw(): void;
    _createShadowTransform(map: any): void;
    _updateSize(nextProps: MapboxProps<MapT>): boolean;
    _updateViewState(nextProps: MapboxProps<MapT>, triggerEvents: boolean): boolean;
    _updateSettings(nextProps: MapboxProps<MapT>, currProps: MapboxProps<MapT>): boolean;
    _updateStyle(nextProps: MapboxProps<MapT>, currProps: MapboxProps<MapT>): boolean;
    _updateStyleComponents(nextProps: MapboxProps<MapT>, currProps: MapboxProps<MapT>): boolean;
    _updateHandlers(nextProps: MapboxProps<MapT>, currProps: MapboxProps<MapT>): boolean;
    _onEvent: (e: MapEvent<MapT>) => void;
    private _queryRenderedFeatures;
    _updateHover(e: MapMouseEvent<MapT>): void;
    _onPointerEvent: (e: MapLayerMouseEvent<MapT> | MapLayerTouchEvent<MapT>) => void;
    _onCameraEvent: (e: ViewStateChangeEvent<MapT>) => void;
    _fireEvent(baseFire: Function, event: string | MapEvent<MapT>, properties?: object): MapInstanceInternal<MapT>;
    _onBeforeRepaint(): void;
    _onAfterRepaint: () => void;
}
