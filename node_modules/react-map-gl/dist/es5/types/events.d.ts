import type { ViewState, Point, LngLat, LngLatBounds, MapGeoJSONFeature } from './common';
import type { MapInstance, Evented, MarkerInstance, PopupInstance, GeolocateControlInstance } from './lib';
import type { AnySource } from './style-spec';
export interface MapEvent<SourceT extends Evented, OriginalEventT = undefined> {
    type: string;
    target: SourceT;
    originalEvent: OriginalEventT;
}
export declare type ErrorEvent<MapT extends MapInstance> = MapEvent<MapT> & {
    type: 'error';
    error: Error;
};
export declare type MapStyleDataEvent<MapT extends MapInstance> = MapEvent<MapT> & {
    dataType: 'style';
};
export declare type MapSourceDataEvent<MapT extends MapInstance> = MapEvent<MapT> & {
    dataType: 'source';
    isSourceLoaded: boolean;
    source: AnySource;
    sourceId: string;
    sourceDataType: 'metadata' | 'content';
    tile: any;
    coord: {
        canonical: {
            x: number;
            y: number;
            z: number;
            key: number;
        };
        wrap: number;
        key: number;
    };
};
export declare type MapMouseEvent<MapT extends MapInstance> = MapEvent<MapT, MouseEvent> & {
    type: 'mousedown' | 'mouseup' | 'click' | 'dblclick' | 'mousemove' | 'mouseover' | 'mouseenter' | 'mouseleave' | 'mouseout' | 'contextmenu';
    point: Point;
    lngLat: LngLat;
    preventDefault(): void;
    defaultPrevented: boolean;
};
export declare type MapLayerMouseEvent<MapT extends MapInstance> = MapMouseEvent<MapT> & {
    features?: MapGeoJSONFeature[] | undefined;
};
export declare type MapTouchEvent<MapT extends MapInstance> = MapEvent<MapT, TouchEvent> & {
    type: 'touchstart' | 'touchend' | 'touchcancel';
    point: Point;
    lngLat: LngLat;
    points: Point[];
    lngLats: LngLat[];
    preventDefault(): void;
    defaultPrevented: boolean;
};
export declare type MapLayerTouchEvent<MapT extends MapInstance> = MapTouchEvent<MapT> & {
    features?: MapGeoJSONFeature[] | undefined;
};
export declare type MapWheelEvent<MapT extends MapInstance> = MapEvent<MapT, WheelEvent> & {
    type: 'wheel';
    preventDefault(): void;
    defaultPrevented: boolean;
};
export declare type MapBoxZoomEvent<MapT extends MapInstance> = MapEvent<MapT, MouseEvent> & {
    type: 'boxzoomstart' | 'boxzoomend' | 'boxzoomcancel';
    boxZoomBounds: LngLatBounds;
};
export declare type ViewStateChangeEvent<MapT extends MapInstance> = (MapEvent<MapT, MouseEvent | TouchEvent | WheelEvent | undefined> & {
    type: 'movestart' | 'move' | 'moveend' | 'zoomstart' | 'zoom' | 'zoomend';
    viewState: ViewState;
}) | (MapEvent<MapT, MouseEvent | TouchEvent | undefined> & {
    type: 'rotatestart' | 'rotate' | 'rotateend' | 'dragstart' | 'drag' | 'dragend' | 'pitchstart' | 'pitch' | 'pitchend';
    viewState: ViewState;
});
export declare type PopupEvent<PopupT extends PopupInstance> = {
    type: 'open' | 'close';
    target: PopupT;
};
export declare type MarkerEvent<MarkerT extends MarkerInstance, OriginalEventT = undefined> = MapEvent<MarkerT, OriginalEventT>;
export declare type MarkerDragEvent<MarkerT extends MarkerInstance> = MarkerEvent<MarkerT> & {
    type: 'dragstart' | 'drag' | 'dragend';
    target: MarkerT;
    lngLat: LngLat;
};
export declare type GeolocateEvent<GeolocateControlT extends GeolocateControlInstance> = MapEvent<GeolocateControlT>;
export declare type GeolocateResultEvent<GeolocateControlT extends GeolocateControlInstance> = GeolocateEvent<GeolocateControlT> & GeolocationPosition;
export declare type GeolocateErrorEvent<GeolocateControlT extends GeolocateControlInstance> = GeolocateEvent<GeolocateControlT> & GeolocationPositionError;
