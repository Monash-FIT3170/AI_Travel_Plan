import type { FilterSpecification, PropertyValueSpecification, BackgroundLayerSpecification as BackgroundLayer, CircleLayerSpecification as CircleLayer, FillLayerSpecification as FillLayer, FillExtrusionLayerSpecification as FillExtrusionLayer, HeatmapLayerSpecification as HeatmapLayer, HillshadeLayerSpecification as HillshadeLayer, LineLayerSpecification as LineLayer, RasterLayerSpecification as RasterLayer, SymbolLayerSpecification as SymbolLayer, GeoJSONSourceSpecification as GeoJSONSource, VideoSourceSpecification as VideoSource, ImageSourceSpecification as ImageSource, VectorSourceSpecification as VectorSource, RasterSourceSpecification as RasterSource, RasterDEMSourceSpecification as RasterDemSource } from '@maplibre/maplibre-gl-style-spec';
export type { BackgroundLayer, CircleLayer, FillLayer, FillExtrusionLayer, HeatmapLayer, HillshadeLayer, LineLayer, RasterLayer, SymbolLayer };
/**
 * @deprecated use `fog` instead
 */
export declare type SkyLayer = {
    id: string;
    type: 'sky';
    metadata?: unknown;
    minzoom?: number;
    maxzoom?: number;
    filter?: FilterSpecification;
    layout?: {
        visibility?: 'visible' | 'none';
    };
    paint?: {
        'sky-atmosphere-color'?: PropertyValueSpecification<string>;
        'sky-atmosphere-halo-color'?: PropertyValueSpecification<string>;
        'sky-atmosphere-sun'?: PropertyValueSpecification<number[]>;
        'sky-atmosphere-sun-intensity'?: PropertyValueSpecification<number>;
        'sky-gradient'?: PropertyValueSpecification<string>;
        'sky-gradient-center'?: PropertyValueSpecification<number[]>;
        'sky-gradient-radius'?: PropertyValueSpecification<number>;
        'sky-opacity'?: PropertyValueSpecification<number>;
        'sky-type'?: 'gradient' | 'atmosphere';
    };
};
export declare type AnyLayer = BackgroundLayer | CircleLayer | FillLayer | FillExtrusionLayer | HeatmapLayer | HillshadeLayer | LineLayer | RasterLayer | SymbolLayer | SkyLayer;
export { GeoJSONSource, VideoSource, ImageSource, VectorSource, RasterSource, RasterDemSource };
export interface CanvasSource {
    type: 'canvas';
    coordinates: number[][];
    animate?: boolean;
    canvas: string | HTMLCanvasElement;
}
export declare type AnySource = GeoJSONSource | VideoSource | ImageSource | VectorSource | RasterSource | RasterDemSource | CanvasSource;
export type { StyleSpecification as MapboxStyle, LightSpecification as Light, TerrainSpecification as Terrain } from '@maplibre/maplibre-gl-style-spec';
export interface Fog {
    color?: PropertyValueSpecification<string>;
    'horizon-blend'?: PropertyValueSpecification<number>;
    range?: PropertyValueSpecification<number[]>;
}
declare type ProjectionNames = 'albers' | 'equalEarth' | 'equirectangular' | 'lambertConformalConic' | 'mercator' | 'naturalEarth' | 'winkelTripel' | 'globe';
export declare type Projection = ProjectionNames | {
    name: ProjectionNames;
    center?: [number, number];
    parallels?: [number, number];
};
