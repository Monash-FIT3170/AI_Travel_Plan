import * as React from 'react';
import type { Map as MaplibreMap, MapOptions, Marker as MaplibreMarker, MarkerOptions, Popup as MaplibrePopup, PopupOptions, AttributionControl as MaplibreAttributionControl, FullscreenControl as MaplibreFullscreenControl, GeolocateControl as MaplibreGeolocateControl, NavigationControl as MaplibreNavigationControl, ScaleControl as MaplibreScaleControl } from 'maplibre-gl';
import { MapProps as _MapProps } from './components/map';
import { MarkerProps as _MarkerProps } from './components/marker';
import { PopupProps as _PopupProps } from './components/popup';
import { AttributionControlProps as _AttributionControlProps } from './components/attribution-control';
import { FullscreenControlProps as _FullscreenControlProps } from './components/fullscreen-control';
import { GeolocateControlProps as _GeolocateControlProps } from './components/geolocate-control';
import { NavigationControlProps as _NavigationControlProps } from './components/navigation-control';
import { ScaleControlProps as _ScaleControlProps } from './components/scale-control';
import type { MapRef as _MapRef } from './mapbox/create-ref';
import type * as events from './types/events';
export declare function useMap(): {
    [id: string]: _MapRef<MaplibreMap>;
    current?: _MapRef<MaplibreMap>;
};
export declare type MapProps = _MapProps<MapOptions, MaplibreMap>;
export declare type MapRef = _MapRef<MaplibreMap>;
export declare const Map: React.ForwardRefExoticComponent<{
    zoom?: number;
    bearing?: number;
    pitch?: number;
    maxZoom?: number;
    minZoom?: number;
    interactive?: boolean;
    minPitch?: number;
    maxPitch?: number;
    maxBounds?: import("maplibre-gl").LngLatBoundsLike;
    renderWorldCopies?: boolean;
    scrollZoom?: boolean;
    boxZoom?: boolean;
    dragRotate?: boolean;
    dragPan?: boolean | import("maplibre-gl").DragPanOptions;
    keyboard?: boolean;
    doubleClickZoom?: boolean;
    touchZoomRotate?: boolean;
    touchPitch?: boolean;
    localIdeographFontFamily?: string;
    antialias?: boolean;
    attributionControl?: boolean;
    bearingSnap?: number;
    clickTolerance?: number;
    collectResourceTiming?: boolean;
    crossSourceCollisions?: boolean;
    cooperativeGestures?: boolean | import("maplibre-gl").GestureOptions;
    customAttribution?: string | string[];
    hash?: string | boolean;
    fadeDuration?: number;
    failIfMajorPerformanceCaveat?: boolean;
    locale?: any;
    logoPosition?: import("maplibre-gl").ControlPosition;
    preserveDrawingBuffer?: boolean;
    pitchWithRotate?: boolean;
    refreshExpiredTiles?: boolean;
    trackResize?: boolean;
    transformRequest?: import("maplibre-gl").RequestTransformFunction;
    maxTileCacheSize?: number;
    pixelRatio?: number;
    maplibreLogo?: boolean;
} & Partial<import("./types/common").ViewState> & {
    mapboxAccessToken?: string;
    initialViewState?: Partial<import("./types/common").ViewState> & {
        bounds?: import("./types/common").LngLatBoundsLike;
        fitBoundsOptions?: {
            offset?: import("./types/common").PointLike;
            minZoom?: number;
            maxZoom?: number;
            padding?: number | import("./types/common").PaddingOptions;
        };
    };
    gl?: WebGLRenderingContext;
    viewState?: import("./types/common").ViewState & {
        width: number;
        height: number;
    };
    mapStyle?: string | import("@maplibre/maplibre-gl-style-spec").StyleSpecification | import("./types/common").ImmutableLike<import("@maplibre/maplibre-gl-style-spec").StyleSpecification>;
    styleDiffing?: boolean;
    fog?: import("./types/style-spec").Fog;
    light?: import("@maplibre/maplibre-gl-style-spec").LightSpecification;
    terrain?: import("@maplibre/maplibre-gl-style-spec").TerrainSpecification;
    interactiveLayerIds?: string[];
    cursor?: string;
    onMouseDown?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onMouseUp?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onMouseOver?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onMouseMove?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onClick?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onDblClick?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onMouseEnter?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onMouseLeave?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onMouseOut?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onContextMenu?: (e: events.MapLayerMouseEvent<MaplibreMap>) => void;
    onTouchStart?: (e: events.MapLayerTouchEvent<MaplibreMap>) => void;
    onTouchEnd?: (e: events.MapLayerTouchEvent<MaplibreMap>) => void;
    onTouchMove?: (e: events.MapLayerTouchEvent<MaplibreMap>) => void;
    onTouchCancel?: (e: events.MapLayerTouchEvent<MaplibreMap>) => void;
    onMoveStart?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onMove?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onMoveEnd?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onDragStart?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onDrag?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onDragEnd?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onZoomStart?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onZoom?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onZoomEnd?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onRotateStart?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onRotate?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onRotateEnd?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onPitchStart?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onPitch?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onPitchEnd?: (e: events.ViewStateChangeEvent<MaplibreMap>) => void;
    onWheel?: (e: events.MapWheelEvent<MaplibreMap>) => void;
    onBoxZoomStart?: (e: events.MapBoxZoomEvent<MaplibreMap>) => void;
    onBoxZoomEnd?: (e: events.MapBoxZoomEvent<MaplibreMap>) => void;
    onBoxZoomCancel?: (e: events.MapBoxZoomEvent<MaplibreMap>) => void;
    onResize?: (e: events.MapEvent<MaplibreMap, undefined>) => void;
    onLoad?: (e: events.MapEvent<MaplibreMap, undefined>) => void;
    onRender?: (e: events.MapEvent<MaplibreMap, undefined>) => void;
    onIdle?: (e: events.MapEvent<MaplibreMap, undefined>) => void;
    onError?: (e: events.ErrorEvent<MaplibreMap>) => void;
    onRemove?: (e: events.MapEvent<MaplibreMap, undefined>) => void;
    onData?: (e: events.MapStyleDataEvent<MaplibreMap> | events.MapSourceDataEvent<MaplibreMap>) => void;
    onStyleData?: (e: events.MapStyleDataEvent<MaplibreMap>) => void;
    onSourceData?: (e: events.MapSourceDataEvent<MaplibreMap>) => void;
} & import("./utils/set-globals").GlobalSettings & {
    mapLib?: import("./types/lib").MapLib<MaplibreMap> | Promise<import("./types/lib").MapLib<MaplibreMap>>;
    reuseMaps?: boolean;
    id?: string;
    style?: React.CSSProperties;
    children?: any;
} & React.RefAttributes<MapRef>>;
export declare type MarkerProps = _MarkerProps<MarkerOptions, MaplibreMarker>;
export declare const Marker: (props: MarkerProps & React.RefAttributes<MaplibreMarker>) => React.ReactElement | null;
export declare type PopupProps = _PopupProps<PopupOptions, MaplibrePopup>;
export declare const Popup: (props: PopupProps & React.RefAttributes<MaplibrePopup>) => React.ReactElement | null;
declare type AttributionControlOptions = ConstructorParameters<typeof MaplibreAttributionControl>[0];
export declare type AttributionControlProps = _AttributionControlProps<AttributionControlOptions>;
export declare const AttributionControl: (props: AttributionControlProps) => React.ReactElement | null;
declare type FullscreenControlOptions = ConstructorParameters<typeof MaplibreFullscreenControl>[0];
export declare type FullscreenControlProps = _FullscreenControlProps<FullscreenControlOptions>;
export declare const FullscreenControl: (props: FullscreenControlProps) => React.ReactElement | null;
declare type NavigationControlOptions = ConstructorParameters<typeof MaplibreNavigationControl>[0];
export declare type NavigationControlProps = _NavigationControlProps<NavigationControlOptions>;
export declare const NavigationControl: (props: NavigationControlProps) => React.ReactElement | null;
declare type GeolocateControlOptions = ConstructorParameters<typeof MaplibreGeolocateControl>[0];
export declare type GeolocateControlProps = _GeolocateControlProps<GeolocateControlOptions, MaplibreGeolocateControl>;
export declare const GeolocateControl: (props: GeolocateControlProps & React.RefAttributes<MaplibreGeolocateControl>) => React.ReactElement | null;
declare type ScaleControlOptions = ConstructorParameters<typeof MaplibreScaleControl>[0];
export declare type ScaleControlProps = _ScaleControlProps<ScaleControlOptions>;
export declare const ScaleControl: (props: ScaleControlProps) => React.ReactElement | null;
export { default as Source } from './components/source';
export { default as Layer } from './components/layer';
export { default as useControl } from './components/use-control';
export { MapProvider } from './components/use-map';
export default Map;
export * from './types/public';
export type { SourceProps } from './components/source';
export type { LayerProps } from './components/layer';
export declare type MapEvent = events.MapEvent<MaplibreMap>;
export declare type ErrorEvent = events.ErrorEvent<MaplibreMap>;
export declare type MapStyleDataEvent = events.MapStyleDataEvent<MaplibreMap>;
export declare type MapSourceDataEvent = events.MapSourceDataEvent<MaplibreMap>;
export declare type MapMouseEvent = events.MapMouseEvent<MaplibreMap>;
export declare type MapLayerMouseEvent = events.MapLayerMouseEvent<MaplibreMap>;
export declare type MapTouchEvent = events.MapTouchEvent<MaplibreMap>;
export declare type MapLayerTouchEvent = events.MapLayerTouchEvent<MaplibreMap>;
export declare type MapWheelEvent = events.MapWheelEvent<MaplibreMap>;
export declare type MapBoxZoomEvent = events.MapBoxZoomEvent<MaplibreMap>;
export declare type ViewStateChangeEvent = events.ViewStateChangeEvent<MaplibreMap>;
export declare type PopupEvent = events.PopupEvent<MaplibrePopup>;
export declare type MarkerEvent = events.MarkerEvent<MaplibreMarker>;
export declare type MarkerDragEvent = events.MarkerDragEvent<MaplibreMarker>;
export declare type GeolocateEvent = events.GeolocateEvent<MaplibreGeolocateControl>;
export declare type GeolocateResultEvent = events.GeolocateResultEvent<MaplibreGeolocateControl>;
export declare type GeolocateErrorEvent = events.GeolocateErrorEvent<MaplibreGeolocateControl>;
